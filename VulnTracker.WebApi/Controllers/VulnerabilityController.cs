using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using VulnTracker.DataAccess.Context;
using VulnTracker.Domain.Entities;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace VulnTracker.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private readonly VulnTrackerDbContext _context;

        public VulnerabilityController(VulnTrackerDbContext context)
        {
            _context = context;
        }

        // Create
        [HttpPost]
        public async Task<IActionResult> CreateVulnerability([FromBody] Vulnerability vulnerability)
        {
            _context.Vulnerabilities.Add(vulnerability);
            await _context.SaveChangesAsync();
            return Ok(vulnerability);
        }

        // Read All
        [HttpGet]
        public async Task<IActionResult> GetAllVulnerabilities()
        {
            var vulnerabilities = await _context.Vulnerabilities.ToListAsync();
            return Ok(vulnerabilities);
        }

        // Read By ID
        [HttpGet("{id}")]
        public async Task<IActionResult> GetVulnerabilityById(Guid id)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (vulnerability == null)
                return NotFound("Vulnerability not found");

            return Ok(vulnerability);
        }

        // Update
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateVulnerability(Guid id, [FromBody] Vulnerability updatedVulnerability)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (vulnerability == null)
                return NotFound("Vulnerability not found");

            vulnerability.Title = updatedVulnerability.Title;
            vulnerability.Description = updatedVulnerability.Description;
            vulnerability.Severity = updatedVulnerability.Severity;

            _context.Vulnerabilities.Update(vulnerability);
            await _context.SaveChangesAsync();
            return Ok(vulnerability);
        }

        // Delete
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteVulnerability(Guid id)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (vulnerability == null)
                return NotFound("Vulnerability not found");

            _context.Vulnerabilities.Remove(vulnerability);
            await _context.SaveChangesAsync();
            return Ok("Vulnerability deleted");
        }

        // Filter and Sort
        [HttpGet("filter")]
        public async Task<IActionResult> FilterVulnerabilities(string? severity, string? sortBy, bool ascending = true)
        {
            // Filtreleme işlemi
            var query = _context.Vulnerabilities.AsQueryable();

            if (!string.IsNullOrEmpty(severity))
            {
                query = query.Where(v => v.Severity == severity);
            }

            // Sıralama işlemi
            if (!string.IsNullOrEmpty(sortBy))
            {
                query = sortBy.ToLower() switch
                {
                    "title" => ascending ? query.OrderBy(v => v.Title) : query.OrderByDescending(v => v.Title),
                    "createdat" => ascending ? query.OrderBy(v => v.CreatedAt) : query.OrderByDescending(v => v.CreatedAt),
                    _ => query
                };
            }

            var vulnerabilities = await query.ToListAsync();
            return Ok(vulnerabilities);
        }
    }
}
